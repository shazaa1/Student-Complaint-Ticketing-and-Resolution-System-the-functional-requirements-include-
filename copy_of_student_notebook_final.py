# -*- coding: utf-8 -*-
"""Copy of student notebook final.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1t2ZGq-WelzGsFUqIW8Ld3zdA38UBlya7

# **Student Ticketing System**
**instance:** 10,000

**Feature:** 29

This dataset is related to student complaints in an educational institution , which is about all about the the ticketing complaint system, The dataset contains student complaint tickets with details including ID, department, category, description text, submission timestamp, status, resolution time, and satisfaction scores. Sentiment analysis has been applied to the complaint text to classify attitudes as positive, negative, or neutral, providing insights into student satisfaction levels. This structured complaint data enables both administrative tracking and analytical opportunities to identify recurring issues, measure departmental performance, and improve institutional response times.

**Genre :** Category/theme of the complaint (e.g., "International student experiences," "Financial Support").

**Reports :** Free-text description of the complaint.

**Age :** Age of the student.

**Year :** Academic year of the student (e.g., "First," "Second").

**Count :** Number of ticket in same category the one student report about

**Gender :** Gender of the student (e.g., Female, Male).

**Nationality :** Country of origin (e.g., France, Mexico, Egypt).

**Ticket ID :** Unique identifier for each complaint ticket (e.g., TKT-417184).

**Student_ID :** Anonymized identifier for the student (e.g., STU-85221).

**GPA :** Student’s grade point average (e.g., 3.09).

**Priority :** Urgency level of the ticket (e.g., low, medium, high, critical).

**Status :** Current state of the ticket (e.g., resolved, pending, rejected).

**Report_time :** Timestamp when the complaint was submitted.

**Report_hour:** Hour of the day when the complaint was submitted (e.g., 9, 15).

**Response_time :** Timestamp when the ticket was resolved.

**Response_days :** Days taken to resolve the ticket (e.g., 0.66, 8.62).

**Gmail :** Student’s email address (e.g., mrs.john@Gmail.com).

**Resolution_clean :** Proposed or implemented solutions (e.g., "Introduce a buddy system").

**Resolution_sentiment :** Sentiment score of the resolution text (e.g., -0.057).

**Feedback_sentiment :** Sentiment score of student feedback (e.g., 0.657).

**Response_days_norm :** Normalized version of Response_days (e.g., 0.602).

**Status_score :** Numerical representation of ticket status (e.g., 0.7).

**Satisfaction_score :** Calculated satisfaction metric (e.g., 0.642).

**Satisfaction_level :** Categorical satisfaction (e.g., Satisfied, Neutral, Dissatisfied).

**Response_bins :** Binned response times (e.g., <1 day, 1-3 days).
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# Plotly Visualizations (Interactive)
import plotly.express as px
from sklearn.preprocessing import StandardScaler
import warnings
warnings.filterwarnings("ignore")

df=pd.read_excel('/content/Final_Sentiment analysis.xlsx')

def parse_date(date_str):
    try:
        return pd.to_datetime(date_str, format='%m/%d/%Y %H:%M')
    except ValueError:
        return pd.to_datetime(date_str, format='%Y-%m-%d %H:%M')

df.head(10)

# Check the shape of the dataset
print(f"Dataset shape: {df.shape}")

print(df.duplicated().sum())

print(df.isnull().sum())

def generate_gmail(row):
    if pd.isnull(row['Gmail']):
        first_name = row['Student Name'].split()[0].lower()
        return f"{first_name}@gmail.com"
    return row['Gmail']

# Drop rows where Gmail is null as we want it unique
df.loc[df['Gmail'].isnull(), 'Gmail'] = df[df['Gmail'].isnull()].apply(generate_gmail, axis=1)

# Fill text columns
df['Feedback'].fillna('No Feedback', inplace=True)
df['Resolution_clean'].fillna('Unknown', inplace=True)
df['Feedback_clean'].fillna('No Feedback', inplace=True)

# Recalculate binned feature from normalized response days
df['response_bins'] = pd.qcut(df['response_days_norm'], q=4, labels=["Very Fast", "Fast", "Slow", "Very Slow"])

for column in df.columns:
    print(f"\n--- {column} ---")
    print(df[column].value_counts(dropna=False))

df['GPA'].unique()

print(df['GPA'].max())
print(df['GPA'].min())

sns.boxplot(df['GPA'])

df['GPA'] = df['GPA'].apply(lambda x: f"{x:.2f}")
df['GPA'] = df['GPA'].astype(float).round(2)

df['GPA'].unique()

len(df['GPA'].unique())

import matplotlib.pyplot as plt
import seaborn as sns

# Plot histogram
plt.figure(figsize=(10, 6))
sns.histplot(df['GPA'], bins=20, kde=True, color='skyblue')
plt.title('GPA Distribution')
plt.xlabel('GPA')
plt.ylabel('Frequency')
plt.axvline(df['GPA'].mean(), color='red', linestyle='--', label='Mean')
plt.axvline(df['GPA'].median(), color='green', linestyle='--', label='Median')
plt.legend()
plt.show()

Q1 = df['GPA'].quantile(0.25)
Q3 = df['GPA'].quantile(0.75)
IQR = Q3 - Q1
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

# Winsorize (clip) outliers
df['GPA'] = df['GPA'].clip(lower=lower_bound, upper=upper_bound)

# Replot
sns.boxplot(y=df['GPA'])

fig = px.histogram(df, x='Gender', color='Gender', title='Distribution of Complaints by Gender')
fig.update_layout(bargap=0.5)
fig.show()

fig = px.histogram(df, x='priority', color='priority', title='Complaints by Priority Level',
                   category_orders={"priority": ["low", "medium", "high", "critical"]})
fig.update_layout(bargap=0.3)
fig.show()

fig = px.scatter(df, x='GPA', y='satisfaction_score', color='satisfaction_level',
                 title='GPA vs Satisfaction Score', hover_data=['Year', 'priority'])
fig.show()

fig = px.box(df, x='priority', y='response_days', color='priority',
             title='Response Time (Days) by Priority Level',
             category_orders={"priority": ["low", "medium", "high", "critical"]})
fig.show()

cap = df['response_days'].quantile(0.95)
df['response_days'] = np.where(df['response_days'] > cap, cap, df['response_days'])

fig = px.box(df, x='priority', y='response_days', color='priority',
             title='Response Time (Days) by Priority Level',
             category_orders={"priority": ["low", "medium", "high", "critical"]})
fig.show()

def cap_outliers_custom(group):
    priority = group['priority'].iloc[0]
    if priority in ['critical', 'high']:
        cap = group['response_days'].quantile(0.90)  # tighter cap
    else:
        cap = group['response_days'].quantile(0.95)
    group['response_days_capped'] = np.where(group['response_days'] > cap, cap, group['response_days'])
    return group

df = df.groupby('priority', group_keys=False).apply(cap_outliers_custom)

df['log_response_days'] = np.log1p(df['response_days_capped'])  # log1p handles 0 safely

fig = px.box(df, x='priority', y='log_response_days', color='priority',
             title='Log-Scaled Response Time (Capped) by Priority Level',
             category_orders={"priority": ["low", "medium", "high", "critical"]})
fig.show()

# Status Distribution (Plotly)
fig = px.histogram(df, x='status', color='status', title='Complaint Status Distribution')
fig.update_layout(bargap=0.3)
fig.show()

fig = px.histogram(df, x='Year', color='Year', title='Complaints by Year of Study')
fig.update_layout(bargap=0.3)
fig.show()

fig = px.histogram(df, x='Age', nbins=10, title='Distribution of Complaints by Age', color_discrete_sequence=['indigo'])
fig.show()

import plotly.express as px
fig = px.sunburst(df, path=['Genre', 'priority'],
    title='Complaint Categories by Priority Level')
fig.show()

import seaborn as sns
import matplotlib.pyplot as plt

sns.countplot(data=df, x='priority', order=['low', 'medium', 'high', 'critical'], palette='viridis')
plt.title('Number of Complaints by Priority Level (Seaborn)')
plt.show()

# Status Count (Seaborn)
sns.countplot(data=df, x='status', palette='pastel')
plt.title('Number of Complaints by Status (Seaborn)')
plt.show()

sns.countplot(data=df, x='Gender', palette='Set2')
plt.title('Gender Distribution of Complaints (Seaborn)')
plt.show()

sns.countplot(data=df, x='Year', palette='coolwarm')
plt.title('Complaints by Year (Seaborn)')
plt.show()

plt.figure(figsize=(10, 6))
category_counts = df['Genre'].value_counts()
sns.barplot(x=category_counts.values, y=category_counts.index, palette='viridis')
plt.title('Distribution of Complaints by Category')
plt.xlabel('Number of Complaints')
plt.ylabel('Complaint Category')
plt.show()

plt.figure(figsize=(8, 5))
status_counts = df['status'].value_counts()
plt.pie(status_counts, labels=status_counts.index, autopct='%1.1f%%', colors=sns.color_palette('pastel'))
plt.title('Distribution of Complaint Statuses')
plt.show()

"""reponse time anlysis"""

plt.figure(figsize=(10, 6))
sns.boxplot(x='Genre', y='response_days',data=df)
plt.xticks(rotation=45)
plt.title('Response Time by Complaint Category (in Days)')
plt.xlabel('Days to respond')
plt.ylabel('Complaint category')
plt.show()

"""Complaint Trends Over Time"""

df['report_time'] = pd.to_datetime(df['report_time'], format='%m/%d/%Y %H:%M', errors='coerce')



df['report_time'] = pd.to_datetime(df['report_time'])
df['report_month'] = df['report_time'].dt.to_period('M')
plt.figure(figsize=(12, 6))
monthly_counts = df.groupby('report_month').size()
monthly_counts.plot(kind='line', marker='o')
plt.title('Monthly Complaint Volume Trends')
plt.xlabel('Month')
plt.ylabel('Number of Complaints')
plt.grid(True)
plt.show()

plt.hist(df['Age'].dropna(), bins=10, color='skyblue', edgecolor='black')
plt.title('Distribution of Complaints by Age (Matplotlib)')
plt.xlabel('Age')
plt.ylabel('Count')
plt.show()



plt.figure(figsize=(10, 6))
sns.histplot(df['response_days'], bins=30, kde=True)
plt.title('Distribution of Response Times (in Days)')
plt.xlabel('Days to Respond')
plt.ylabel('Frequency')
plt.show()

plt.figure(figsize=(12, 6))
sns.countplot(data=df, y='Genre', hue='Gender', palette='pastel')
plt.title('Gender Distribution Across Complaint Categories')
plt.xlabel('Number of Complaints')
plt.ylabel('Complaint Category')
plt.legend(title='Gender')
plt.show()

"""#  Satisfaction & Sentiment

Plotly Satisfaction Charts
"""

# Pie Chart for Satisfaction Level
fig = px.pie(df, names='satisfaction_level', title='Satisfaction Level Distribution')
fig.show()

# GPA vs Satisfaction Score (Scatter)
fig = px.scatter(df, x='GPA', y='satisfaction_score', color='satisfaction_level',
                 title='GPA vs Satisfaction Score', hover_data=['Year', 'priority'])
fig.show()

fig = px.box(df, x='priority', y='satisfaction_score', color='priority',
             title='Satisfaction Score by Complaint Priority',
             category_orders={"priority": ["low", "medium", "high", "critical"]})
fig.show()

"""Time Trends & Response Analysis"""

fig = px.histogram(df, x='report_hour', title='Number of Complaints by Report Hour')
fig.show()

monthly_data = df['Reports'].value_counts().sort_index()
fig = px.line(x=monthly_data.index, y=monthly_data.values,
              labels={'x': 'Month', 'y': 'Number of Complaints'},
              title='Monthly Complaint Trend')
fig.show()

"""
 Nationality and Resolution Insights"""

top_nationalities = df['Nationality'].value_counts().nlargest(10)
fig = px.bar(x=top_nationalities.index, y=top_nationalities.values,
             labels={'x': 'Nationality', 'y': 'Number of Complaints'},
             title='Top 10 Nationalities by Complaint Volume')
fig.show()

fig = px.histogram(df, x='Resolution', color='Resolution', title='Resolution Outcomes')
fig.show()

"""Correlation Analysis (Only with Seaborn)"""

# Correlation Heatmap
correlation = df[['Age', 'GPA', 'response_days', 'satisfaction_score']].corr()
sns.heatmap(correlation, annot=True, cmap='Blues')
plt.title('Correlation Heatmap')
plt.show()

