# -*- coding: utf-8 -*-
"""student notebook final.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wHaJrCOujzrWoFP89iozkpDiEjEvdkY0
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# Plotly Visualizations (Interactive)
import plotly.express as px

df=pd.read_excel('/content/Final_Sentiment analysis depi.xlsx')

fig = px.histogram(df, x='Gender', color='Gender', title='Distribution of Complaints by Gender')
fig.update_layout(bargap=0.5)
fig.show()

fig = px.histogram(df, x='priority', color='priority', title='Complaints by Priority Level',
                   category_orders={"priority": ["low", "medium", "high", "critical"]})
fig.update_layout(bargap=0.3)
fig.show()

fig = px.scatter(df, x='GPA', y='satisfaction_score', color='satisfaction_level',
                 title='GPA vs Satisfaction Score', hover_data=['Year', 'priority'])
fig.show()

fig = px.box(df, x='priority', y='response_days', color='priority',
             title='Response Time (Days) by Priority Level',
             category_orders={"priority": ["low", "medium", "high", "critical"]})
fig.show()

# Status Distribution (Plotly)
fig = px.histogram(df, x='status', color='status', title='Complaint Status Distribution')
fig.update_layout(bargap=0.3)
fig.show()

fig = px.histogram(df, x='Year', color='Year', title='Complaints by Year of Study')
fig.update_layout(bargap=0.3)
fig.show()

fig = px.histogram(df, x='Age', nbins=10, title='Distribution of Complaints by Age', color_discrete_sequence=['indigo'])
fig.show()

import plotly.express as px
fig = px.sunburst(df, path=['Genre', 'priority'],
    title='Complaint Categories by Priority Level')
fig.show()

import seaborn as sns
import matplotlib.pyplot as plt

sns.countplot(data=df, x='priority', order=['low', 'medium', 'high', 'critical'], palette='viridis')
plt.title('Number of Complaints by Priority Level (Seaborn)')
plt.show()

# Status Count (Seaborn)
sns.countplot(data=df, x='status', palette='pastel')
plt.title('Number of Complaints by Status (Seaborn)')
plt.show()

sns.countplot(data=df, x='Gender', palette='Set2')
plt.title('Gender Distribution of Complaints (Seaborn)')
plt.show()

sns.countplot(data=df, x='Year', palette='coolwarm')
plt.title('Complaints by Year (Seaborn)')
plt.show()

plt.figure(figsize=(10, 6))
category_counts = df['Genre'].value_counts()
sns.barplot(x=category_counts.values, y=category_counts.index, palette='viridis')
plt.title('Distribution of Complaints by Category')
plt.xlabel('Number of Complaints')
plt.ylabel('Complaint Category')
plt.show()

plt.figure(figsize=(8, 5))
status_counts = df['status'].value_counts()
plt.pie(status_counts, labels=status_counts.index, autopct='%1.1f%%', colors=sns.color_palette('pastel'))
plt.title('Distribution of Complaint Statuses')
plt.show()

"""reponse time anlysis"""

plt.figure(figsize=(10, 6))
sns.boxplot(x='Genre', y='response_days',data=df)
plt.xticks(rotation=45)
plt.title('Response Time by Complaint Category (in Days)')
plt.xlabel('Days to respond')
plt.ylabel('Complaint category')
plt.show()

"""Complaint Trends Over Time"""

df['report_time'] = pd.to_datetime(df['report_time'])
df['report_month'] = df['report_time'].dt.to_period('M')
plt.figure(figsize=(12, 6))
monthly_counts = df.groupby('report_month').size()
monthly_counts.plot(kind='line', marker='o')
plt.title('Monthly Complaint Volume Trends')
plt.xlabel('Month')
plt.ylabel('Number of Complaints')
plt.grid(True)
plt.show()

plt.hist(df['Age'].dropna(), bins=10, color='skyblue', edgecolor='black')
plt.title('Distribution of Complaints by Age (Matplotlib)')
plt.xlabel('Age')
plt.ylabel('Count')
plt.show()



plt.figure(figsize=(10, 6))
sns.histplot(df['response_days'], bins=30, kde=True)
plt.title('Distribution of Response Times (in Days)')
plt.xlabel('Days to Respond')
plt.ylabel('Frequency')
plt.show()

plt.figure(figsize=(12, 6))
sns.countplot(data=df, y='Genre', hue='Gender', palette='pastel')
plt.title('Gender Distribution Across Complaint Categories')
plt.xlabel('Number of Complaints')
plt.ylabel('Complaint Category')
plt.legend(title='Gender')
plt.show()

"""#  Satisfaction & Sentiment

Plotly Satisfaction Charts
"""

# Pie Chart for Satisfaction Level
fig = px.pie(df, names='satisfaction_level', title='Satisfaction Level Distribution')
fig.show()

# GPA vs Satisfaction Score (Scatter)
fig = px.scatter(df, x='GPA', y='satisfaction_score', color='satisfaction_level',
                 title='GPA vs Satisfaction Score', hover_data=['Year', 'priority'])
fig.show()

fig = px.box(df, x='priority', y='satisfaction_score', color='priority',
             title='Satisfaction Score by Complaint Priority',
             category_orders={"priority": ["low", "medium", "high", "critical"]})
fig.show()

"""Time Trends & Response Analysis"""

fig = px.histogram(df, x='report_hour', title='Number of Complaints by Report Hour')
fig.show()

fig = px.box(df, x='priority', y='response_days', color='priority',
             title='Response Time (Days) by Priority Level',
             category_orders={"priority": ["low", "medium", "high", "critical"]})
fig.show()

fig = px.box(df, x='Gender', y='response_days', color='Gender',
             title='Response Time by Gender')
fig.show()

monthly_data = df['Reports'].value_counts().sort_index()
fig = px.line(x=monthly_data.index, y=monthly_data.values,
              labels={'x': 'Month', 'y': 'Number of Complaints'},
              title='Monthly Complaint Trend')
fig.show()

"""
 Nationality and Resolution Insights"""

top_nationalities = df['Nationality'].value_counts().nlargest(10)
fig = px.bar(x=top_nationalities.index, y=top_nationalities.values,
             labels={'x': 'Nationality', 'y': 'Number of Complaints'},
             title='Top 10 Nationalities by Complaint Volume')
fig.show()

fig = px.histogram(df, x='Resolution', color='Resolution', title='Resolution Outcomes')
fig.show()

"""Correlation Analysis (Only with Seaborn)"""

# Correlation Heatmap
correlation = df[['Age', 'GPA', 'response_days', 'satisfaction_score']].corr()
sns.heatmap(correlation, annot=True, cmap='Blues')
plt.title('Correlation Heatmap')
plt.show()